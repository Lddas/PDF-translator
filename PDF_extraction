import fitz

def extract_text_with_positions(pdf_path, tabs_info):
    doc = fitz.open(pdf_path)
    text_info = tabs_info  # Copy the tabs info
    for page_num, page in enumerate(doc):
        if page_num not in text_info:
            text_info[page_num] = []
        blocks = page.get_text("dict")["blocks"]
        for block in blocks:
            if block['type'] == 0:
                combined_text = ""
                block_info = []
                is_title = False
                tab_values = [False, 0, 0, 0, []]
                for line in block['lines']:
                    for span in line['spans']:
                        text = span['text']
                        x0, y0 = span['bbox'][:2]
                        font_name = span['font']
                        font_size = span['size']
                        if font_size >= 14:
                            is_title = True
                        flags = flags_decomposer(span["flags"])
                        base_font = classify_font(flags)
                        color = fitz.sRGB_to_rgb(span["color"])
                        color = tuple(c / 255 for c in color)
                        pos = (x0, y0)
                        combined_text += text + " "
                        block_info.append((text, pos, base_font, font_size, color, is_title, tab_values))
                text_info[page_num].append((combined_text.strip(), block_info))
    doc.close()
    return text_info

def extract_image_info(pdf_path):
    doc = fitz.open(pdf_path)
    image_info = {}
    for page_num, page in enumerate(doc):
        image_info[page_num] = []
        for img in page.get_images(full=True):
            xref = img[0]
            img_rect = page.get_image_rects(xref)
            if img_rect:
                image_info[page_num].append((xref, img_rect[0]))
    doc.close()
    return image_info

def flags_decomposer(flags):
    l = []
    if flags & 2 ** 0:
        l.append("superscript")
    if flags & 2 ** 1:
        l.append("italic")
    if flags & 2 ** 2:
        l.append("serifed")
    else:
        l.append("sans")
    if flags & 2 ** 3:
        l.append("monospaced")
    else:
        l.append("proportional")
    if flags & 2 ** 4:
        l.append("bold")
    return l

def classify_font(flags):
    if 'bold' in flags and 'italic' in flags:
        return 'hebi'
    elif 'bold' in flags:
        return 'hebo'
    elif 'italic' in flags:
        return 'heit'
    else:
        return 'helv'
